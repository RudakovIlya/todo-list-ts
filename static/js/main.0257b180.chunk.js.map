{"version":3,"sources":["components/AddItemForm.tsx","components/EditableSpan.tsx","state/hooks/hooks.ts","components/Task.tsx","components/TodoList.tsx","state/selectors/tasksSelector.ts","App.tsx","state/tasksReducer.ts","state/todoListReducer.ts","state/store.ts","index.tsx"],"names":["AddItemForm","memo","addItem","useState","error","setError","titleTask","setTitle","addItemCallback","trimmedTitle","trim","TextField","label","variant","value","onChange","event","currentTarget","onKeyDown","key","IconButton","onClick","color","style","maxWidth","maxHeight","minWidth","minHeight","EditableSpan","propsTitle","title","changeTitle","editMode","setEditMode","activateEditMode","onBlur","autoFocus","onDoubleClick","useAppDispatch","useDispatch","useAppSelector","useSelector","Task","props","task","todoListID","removeTask","changeTaskStatus","changTaskTitle","changeTaskStatusCallback","useCallback","id","checked","ListItem","secondaryAction","aria-label","disablePadding","ListItemButton","dense","ListItemIcon","Checkbox","disableRipple","isDone","TodoList","filter","addTask","removeTodoList","changeTodoListFilter","editTodoListTitle","tasks","state","filteredTaskSelector","onClickHandlerCreator","tasksElements","useMemo","map","removeTodoListCallback","addTaskCallback","changeTodoListTitle","List","marginTop","display","columnGap","Button","background","border","App","dispatch","todoLists","taskId","taskID","type","payload","removeTaskAC","newTitle","addTaskAC","changTaskStatusAC","changTaskTitleAC","changeTodoListFilterAC","removeTodoListAC","addTodoListCallback","v1","changeTodoListTitleAC","todoListsItem","todoList","Grid","item","xs","md","Paper","elevation","padding","borderRadius","className","AppBar","position","Container","Toolbar","size","edge","sx","mr","Typography","component","flexGrow","fixed","container","spacing","rootReducer","combineReducers","action","stateItem","copy","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","ReactDOM","createRoot","document","getElementById","render"],"mappings":"kQAoDeA,EA3C+BC,gBAAK,YAAgB,IAAdC,EAAO,EAAPA,QAEjD,EAA0BC,oBAAkB,GAAM,mBAA3CC,EAAK,KAAEC,EAAQ,KACtB,EAA8BF,mBAAiB,IAAG,mBAA3CG,EAAS,KAAEC,EAAQ,KAEpBC,EAAkB,WACpB,IAAMC,EAAeH,EAAUI,OAC3BD,GACAP,EAAQO,GACRF,EAAS,KAETF,GAAS,IAcjB,OACI,6BACI,kBAACM,EAAA,EAAS,CACNC,MAAOR,EAAQ,2BAA6B,QAC5CS,QAAQ,WACRC,MAAOR,EACPS,SAZiB,SAACC,GAC1BT,EAASS,EAAMC,cAAcH,OAE7BV,GAASC,GAAS,IAUVa,UAjBkB,SAACF,GACb,UAAdA,EAAMG,KAAmBX,KAiBjBJ,MAAOA,IAEX,kBAACgB,EAAA,EAAU,CAACC,QAASb,EAAiBc,MAAO,UACjCC,MAAO,CAACC,SAAU,OAAQC,UAAW,OAAQC,SAAU,OAAQC,UAAW,SAClF,kBAAC,IAAU,WCXZC,EA3BiC3B,gBAAK,YAAuC,IAA9B4B,EAAU,EAAjBC,MAAmBC,EAAW,EAAXA,YACtE,EAA0B5B,mBAAiB0B,GAAW,mBAA/CC,EAAK,KAAEvB,EAAQ,KACtB,EAAgCJ,oBAAkB,GAAM,mBAAjD6B,EAAQ,KAAEC,EAAW,KAEtBC,EAAmB,WACrBD,GAAaD,GACbD,EAAYD,IAShB,OACI,oCAEQE,EAAW,kBAACrB,EAAA,EAAS,CAACG,MAAOgB,EAAOf,SATrB,SAACC,GACxBT,EAASS,EAAMC,cAAcH,QAQ6CqB,OAAQD,EACpDhB,UANX,SAACF,GAAsC,MAAmB,UAAdA,EAAMG,KAAmBe,KAO1DE,WAAS,EAACvB,QAAQ,aACpC,0BAAMwB,cAAeH,GAAmBL,O,2CC1B/CS,EAAwCC,IACxCC,EAAsDC,I,oCCctDC,EAA0BzC,gBAAK,SAAC0C,GAEzC,IAAOC,EAAkED,EAAlEC,KAAMC,EAA4DF,EAA5DE,WAAYC,EAAgDH,EAAhDG,WAAYC,EAAoCJ,EAApCI,iBAAkBC,EAAkBL,EAAlBK,eAIjDC,EAA2BC,uBAAY,SAAClC,GAAoC,OAAK+B,EAAiBF,EAAYD,EAAKO,GAAInC,EAAMC,cAAcmC,WAAU,CAACL,EAAkBF,EAAYD,EAAKO,KAEzLpB,EAAcmB,uBAAY,SAACpB,GAC7BkB,EAAeH,EAAYD,EAAKO,GAAIrB,KACrC,CAACkB,EAAgBH,EAAYD,EAAKO,KAErC,OACI,kBAACE,EAAA,EAAQ,CACLC,gBACI,kBAAClC,EAAA,EAAU,CAACC,QAXG,WAAH,OAASyB,EAAWD,EAAYD,EAAKO,KAWRI,aAAW,UAChD,kBAAC,IAAM,OAGfC,gBAAc,GAEd,kBAACC,EAAA,EAAc,CAACC,OAAK,GACjB,kBAACC,EAAA,EAAY,KACT,kBAACC,EAAA,EAAQ,CACLC,eAAa,EACbvC,MAAM,UACN8B,QAASR,EAAKkB,OACd/C,SAAUkC,KAGlB,kBAAC,EAAY,CAACnB,MAAOc,EAAKd,MAAOC,YAAaA,SCoD/CgC,EA1EyB9D,gBAAK,SAAC0C,GAE1C,IACIb,EAUAa,EAVAb,MACAkC,EASArB,EATAqB,OACAnB,EAQAF,EARAE,WACAC,EAOAH,EAPAG,WACAmB,EAMAtB,EANAsB,QACAlB,EAKAJ,EALAI,iBACAC,EAIAL,EAJAK,eACAkB,EAGAvB,EAHAuB,eACAC,EAEAxB,EAFAwB,qBACAC,EACAzB,EADAyB,kBAGEC,EAAQ7B,GAAe,SAAC8B,GAAK,OCtCH,SAACD,EAAmBL,GACpD,OAAQA,GACJ,IAAK,MACD,OAAOK,EAEX,IAAK,SACD,OAAOA,EAAML,QAAO,SAAApB,GAAI,OAAKA,EAAKkB,UAEtC,IAAK,YACD,OAAOO,EAAML,QAAO,SAAApB,GAAI,OAAIA,EAAKkB,UAErC,QACI,OAAOO,GD0ByBE,CAAqBD,EAAMD,MAAMxB,GAAamB,MAEhFQ,EAAwBtB,uBAAY,SAACc,GAAwB,OAAK,kBAAMG,EAAqBtB,EAAYmB,MAAS,CAACG,EAAsBtB,IAEzI4B,EAAgBC,mBAAQ,kBAAML,EAAMM,KAAI,SAAC/B,GAC3C,OACI,kBAACF,EAAI,CAACvB,IAAKyB,EAAKO,GAAIP,KAAMA,EAAMI,eAAgBA,EAAgBD,iBAAkBA,EAC5EF,WAAYA,EAAYC,WAAYA,SAE9C,CAACC,EAAkBC,EAAgBF,EAAYuB,EAAOxB,IAEpD+B,EAAyB1B,uBAAY,WACvCgB,EAAerB,KAChB,CAACqB,EAAgBrB,IAEdgC,EAAkB3B,uBAAY,SAACpB,GACjCmC,EAAQpB,EAAYf,KACrB,CAACmC,EAASpB,IAEPiC,EAAsB5B,uBAAY,SAACpB,GACrCsC,EAAkBvB,EAAYf,KAC/B,CAACsC,EAAmBvB,IAEvB,OACI,6BACI,4BACI,kBAAC,EAAY,CAACf,MAAOA,EAAOC,YAAa+C,IACzC,kBAAC1D,EAAA,EAAU,CAACmC,aAAW,SAASlC,QAASuD,GACrC,kBAAC,IAAM,QAGf,kBAAC,EAAW,CAAC1E,QAAS2E,IAEtB,kBAACE,EAAA,EAAI,KAAEN,GAEP,yBAAKlD,MAAO,CAACyD,UAAW,GAAIC,QAAS,OAAQC,UAAW,KACpD,kBAACC,EAAA,EAAM,CAAC5D,MAAO,CACX6D,WAAuB,QAAXpB,EAAmB,UAAY,UAC3CqB,OAAQ,qBAEJxE,QAAoB,QAAXmD,EAAmB,WAAa,YACzC3C,QAASmD,EAAsB,QAAO,OAE9C,kBAACW,EAAA,EAAM,CAAC5D,MAAO,CAAC6D,WAAuB,WAAXpB,EAAsB,UAAY,UAAWqB,OAAQ,qBACzE/D,MAAO,UACPT,QAAoB,WAAXmD,EAAsB,WAAa,YAC5C3C,QAASmD,EAAsB,WAAU,UAEjD,kBAACW,EAAA,EAAM,CACH5D,MAAO,CAAC6D,WAAuB,cAAXpB,EAAyB,UAAY,UAAWqB,OAAQ,qBAC5E/D,MAAO,YACPT,QAAoB,cAAXmD,EAAyB,WAAa,YAC/C3C,QAASmD,EAAsB,cAAa,kB,uGEwBjDc,MA/Ff,WAEI,IAAMC,EAAWjD,IAEVkD,EAAahD,GAAe,SAAC8B,GAAK,OAAKA,KAAvCkB,UAED1C,EAAaI,uBAAY,SAACL,EAAoB4C,GAChDF,ECqCoB,SAAC1C,EAAoB6C,GAC7C,MAAO,CACHC,KAAM,cACNC,QAAS,CACL/C,aACA6C,WD1CKG,CAAahD,EAAY4C,MACnC,CAACF,IAEEtB,EAAUf,uBAAY,SAACL,EAAoBf,GAC7CyD,EC2CiB,SAAC1C,EAAoBiD,GAC1C,MAAO,CACHH,KAAM,WACNC,QAAS,CACL/C,aACAiD,aDhDKC,CAAUlD,EAAYf,MAChC,CAACyD,IAEExC,EAAmBG,uBAAY,SAACL,EAAoB4C,EAAgB3B,GACtEyB,ECiDyB,SAAC1C,EAAoB6C,EAAgB5B,GAClE,MAAO,CACH6B,KAAM,qBACNC,QAAS,CACL/C,aACA6C,SACA5B,WDvDKkC,CAAkBnD,EAAY4C,EAAQ3B,MAChD,CAACyB,IAEEvC,EAAiBE,uBAAY,SAACL,EAAoB4C,EAAgB3D,GACpEyD,ECwDwB,SAAC1C,EAAoB6C,EAAgBI,GACjE,MAAO,CACHH,KAAM,oBACNC,QAAS,CACL/C,aACA6C,SACAI,aD9DKG,CAAiBpD,EAAY4C,EAAQ3D,MAC/C,CAACyD,IAEEpB,EAAuBjB,uBAAY,SAACL,EAAoBmB,GAC1DuB,EEqB8B,SAAC1C,EAAoBmB,GACvD,MAAO,CACH2B,KAAM,yBACNC,QAAS,CACL/C,aACAmB,WF1BKkC,CAAuBrD,EAAYmB,MAC7C,CAACuB,IAEErB,EAAiBhB,uBAAY,SAACL,GAChC0C,EEZwB,SAAC1C,GAC7B,MAAO,CACH8C,KAAM,kBACNC,QAAS,CACL/C,eFQKsD,CAAiBtD,MAC3B,CAAC0C,IAEEa,EAAsBlD,uBAAY,SAACpB,GACrCyD,EENG,CACHI,KAAM,eACNC,QAAS,CACLE,SFGmBhE,EEFnBe,WAAYwD,mBFGjB,CAACd,IAEEnB,EAAoBlB,uBAAY,SAACL,EAAoBf,GACvDyD,EED6B,SAAC1C,EAAoBiD,GACtD,MAAO,CACHH,KAAM,wBACNC,QAAS,CACL/C,aACAiD,aFJKQ,CAAsBzD,EAAYf,MAC5C,CAACyD,IAEEgB,EAAgBf,EAAUb,KAAI,SAAA6B,GAEhC,OACI,kBAACC,EAAA,EAAI,CAACC,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGzF,IAAKqF,EAASrD,IACnC,kBAAC0D,EAAA,EAAK,CAACC,UAAW,EAAGvF,MAAO,CAACwF,QAAS,GAAIC,aAAc,KACpD,kBAAC,EAAQ,CACLnE,WAAY2D,EAASrD,GACrBhC,IAAKqF,EAASrD,GACdrB,MAAO0E,EAAS1E,MAChBkC,OAAQwC,EAASxC,OACjBC,QAASA,EACTE,qBAAsBA,EACtBrB,WAAYA,EACZE,eAAgBA,EAChBD,iBAAkBA,EAClBmB,eAAgBA,EAChBE,kBAAmBA,SAOvC,OACI,yBAAK6C,UAAU,OACX,kBAACC,EAAA,EAAM,CAAC3F,MAAO,CAAC6D,WAAY,WAAY+B,SAAS,UAC7C,kBAACC,EAAA,EAAS,CAAC7F,MAAO,CAACwF,QAAS,GAAIvF,SAAU,MACtC,kBAAC6F,EAAA,EAAO,KACJ,kBAACjG,EAAA,EAAU,CACPkG,KAAK,QACLC,KAAK,QACLjG,MAAM,UACNiC,aAAW,OACXiE,GAAI,CAACC,GAAI,IAET,kBAAC,IAAQ,OAEb,kBAACC,EAAA,EAAU,CAAC7G,QAAQ,KAAK8G,UAAU,MAAMH,GAAI,CAACI,SAAU,IAAG,QAG3D,kBAACzC,EAAA,EAAM,CAAC7D,MAAM,WAAS,YAKnC,kBAAC8F,EAAA,EAAS,CAACS,OAAK,EAACrG,SAAU,MACvB,kBAACiF,EAAA,EAAI,CAACqB,WAAS,EAACvG,MAAO,CAACwF,QAAS,KAC7B,kBAAC,EAAW,CAAC7G,QAASkG,KAE1B,kBAACK,EAAA,EAAI,CAACqB,WAAS,EAACC,QAAS,GACpBxB,M,QG1GfyB,EAAcC,YAAgB,CAChCzC,UDK2B,WAA2E,IAA1ElB,EAAsB,uDAAG,GAAI4D,EAAsB,uCAC/E,OAAQA,EAAOvC,MACX,IAAK,kBACD,OAAOrB,EAAMN,QAAO,SAAAmE,GAAS,OAAIA,EAAUhF,KAAO+E,EAAOtC,QAAQ/C,cACrE,IAAK,eACD,MAAM,CAAE,CAACM,GAAI+E,EAAOtC,QAAQ/C,WAAYf,MAAOoG,EAAOtC,QAAQE,SAAU9B,OAAQ,QAAM,mBAAKM,IAC/F,IAAK,wBACD,OAAOA,EAAMK,KAAI,SAAAwD,GAAS,OAAIA,EAAUhF,KAAO+E,EAAOtC,QAAQ/C,WAAU,2BACjEsF,GAAS,IACZrG,MAAOoG,EAAOtC,QAAQE,WACtBqC,KACR,IAAK,yBACD,OAAO7D,EAAMK,KAAI,SAAAwD,GAAS,OAAIA,EAAUhF,KAAO+E,EAAOtC,QAAQ/C,WAAU,2BACjEsF,GAAS,IACZnE,OAAQkE,EAAOtC,QAAQ5B,SACvBmE,KACR,QACI,OAAO7D,ICrBfD,MFMwB,WAA+D,IAA9DC,EAAgB,uDAAG,GAAI4D,EAAsB,uCACtE,OAAQA,EAAOvC,MACX,IAAK,cACD,OAAO,2BACArB,GAAK,kBACP4D,EAAOtC,QAAQ/C,WAAayB,EAAM4D,EAAOtC,QAAQ/C,YAAYmB,QAAO,SAAAmE,GAAS,OAAIA,EAAUhF,KAAO+E,EAAOtC,QAAQF,YAE1H,IAAK,WACD,OAAO,2BACApB,GAAK,kBACP4D,EAAOtC,QAAQ/C,WAAU,CAAI,CAC1BM,GAAIkD,cACJvE,MAAOoG,EAAOtC,QAAQE,SACtBhC,QAAQ,IACX,mBAAKQ,EAAM4D,EAAOtC,QAAQ/C,gBAEnC,IAAK,qBACD,OAAO,2BACAyB,GAAK,kBACP4D,EAAOtC,QAAQ/C,WAAayB,EAAM4D,EAAOtC,QAAQ/C,YAAY8B,KAAI,SAAAwD,GAAS,OAAIA,EAAUhF,KAAO+E,EAAOtC,QAAQF,OAAM,2BAC9GyC,GAAS,IACZrE,OAAQoE,EAAOtC,QAAQ9B,SACvBqE,OAEZ,IAAK,oBACD,OAAO,2BACA7D,GAAK,kBACP4D,EAAOtC,QAAQ/C,WAAayB,EAAM4D,EAAOtC,QAAQ/C,YAAY8B,KAAI,SAAAwD,GAAS,OAAIA,EAAUhF,KAAO+E,EAAOtC,QAAQF,OAAM,2BAC9GyC,GAAS,IACZrG,MAAOoG,EAAOtC,QAAQE,WACtBqC,OAEZ,IAAK,eACD,OAAO,2BACA7D,GAAK,kBACP4D,EAAOtC,QAAQ/C,WAAa,KAErC,IAAK,kBACD,IAAMuF,EAAI,eAAO9D,GAEjB,cADO8D,EAAKF,EAAOtC,QAAQ/C,YACpBuF,EACX,QACI,OAAO9D,MEvCb+D,EAAmBC,OAAOC,sCAAwCC,IAE3DC,EAAQC,YAAYV,EAAaK,KCVjCM,IAASC,WAClBC,SAASC,eAAe,SAEvBC,OAEG,kBAAC,IAAQ,CAACN,MAAOA,GACb,kBAAC,EAAG,S","file":"static/js/main.0257b180.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState, FC, memo} from 'react';\r\nimport TextField from \"@mui/material/TextField\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport AddBoxIcon from \"@mui/icons-material/AddBox\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nconst AddItemForm: FC<AddItemFormPropsType> = memo(({addItem}) => {\r\n\r\n    const [error, setError] = useState<boolean>(false);\r\n    const [titleTask, setTitle] = useState<string>('');\r\n\r\n    const addItemCallback = () => {\r\n        const trimmedTitle = titleTask.trim()\r\n        if (trimmedTitle) {\r\n            addItem(trimmedTitle);\r\n            setTitle('');\r\n        } else {\r\n            setError(true);\r\n        }\r\n    }\r\n\r\n    const onKeyDownInputHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        event.key === 'Enter' && addItemCallback();\r\n    }\r\n\r\n    const onChangeInputHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value)\r\n\r\n        error && setError(false);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                label={error ? 'Please, enter task title' : 'Title'}\r\n                variant=\"outlined\"\r\n                value={titleTask}\r\n                onChange={onChangeInputHandler}\r\n                onKeyDown={onKeyDownInputHandler}\r\n                error={error}\r\n            />\r\n            <IconButton onClick={addItemCallback} color={'primary'}\r\n                        style={{maxWidth: '40px', maxHeight: '40px', minWidth: '40px', minHeight: '40px'}}>\r\n                <AddBoxIcon/>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default AddItemForm;","import React, {useState, FC, ChangeEvent, KeyboardEvent, memo} from 'react';\r\nimport TextField from \"@mui/material/TextField\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nconst EditableSpan: FC<EditableSpanPropsType> = memo(({title: propsTitle, changeTitle}) => {\r\n    const [title, setTitle] = useState<string>(propsTitle)\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(!editMode)\r\n        changeTitle(title);\r\n    }\r\n\r\n    const onChangeInputValue = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value)\r\n    }\r\n\r\n    const onEnterHandler = (event: KeyboardEvent<HTMLInputElement>) => event.key === 'Enter' && activateEditMode()\r\n\r\n    return (\r\n        <>\r\n            {\r\n                editMode ? <TextField value={title} onChange={onChangeInputValue} onBlur={activateEditMode}\r\n                                      onKeyDown={onEnterHandler}\r\n                                      autoFocus variant=\"standard\"/> :\r\n                    <span onDoubleClick={activateEditMode}>{propsTitle}</span>\r\n            }\r\n        </>\r\n    );\r\n});\r\n\r\nexport default EditableSpan;","import {AppDispatchType, RootStateType} from \"../store\";\r\nimport {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\r\n\r\nexport const useAppDispatch: () => AppDispatchType = useDispatch;\r\nexport const useAppSelector: TypedUseSelectorHook<RootStateType> = useSelector;","import React, {ChangeEvent, FC, memo, useCallback} from 'react';\r\nimport ListItem from \"@mui/material/ListItem\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Delete from \"@mui/icons-material/Delete\";\r\nimport ListItemButton from \"@mui/material/ListItemButton\";\r\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {TaskType} from \"../state/tasksReducer\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todoListID: string\r\n    removeTask: (todoListID: string, taskId: string) => void\r\n    changeTaskStatus: (todoListID: string, taskID: string, isDone: boolean) => void\r\n    changTaskTitle: (todoListID: string, taskID: string, title: string) => void\r\n}\r\n\r\nexport const Task: FC<TaskPropsType> = memo((props) => {\r\n\r\n    const {task, todoListID, removeTask, changeTaskStatus, changTaskTitle} = props\r\n\r\n    const removeTaskCallback = () => removeTask(todoListID, task.id)\r\n\r\n    const changeTaskStatusCallback = useCallback((event: ChangeEvent<HTMLInputElement>) => changeTaskStatus(todoListID, task.id, event.currentTarget.checked), [changeTaskStatus, todoListID, task.id])\r\n\r\n    const changeTitle = useCallback((title: string) => {\r\n        changTaskTitle(todoListID, task.id, title)\r\n    }, [changTaskTitle, todoListID, task.id])\r\n\r\n    return (\r\n        <ListItem\r\n            secondaryAction={\r\n                <IconButton onClick={removeTaskCallback} aria-label=\"delete\">\r\n                    <Delete/>\r\n                </IconButton>\r\n            }\r\n            disablePadding\r\n        >\r\n            <ListItemButton dense>\r\n                <ListItemIcon>\r\n                    <Checkbox\r\n                        disableRipple\r\n                        color=\"primary\"\r\n                        checked={task.isDone}\r\n                        onChange={changeTaskStatusCallback}\r\n                    />\r\n                </ListItemIcon>\r\n                <EditableSpan title={task.title} changeTitle={changeTitle}/>\r\n            </ListItemButton>\r\n        </ListItem>\r\n    );\r\n});\r\n","import React, {FC, memo, useCallback, useMemo} from 'react';\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Delete from \"@mui/icons-material/Delete\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport List from \"@mui/material/List\";\r\nimport {TaskType} from \"../state/tasksReducer\";\r\nimport {FilterValuesType} from \"../state/todoListReducer\";\r\nimport {useAppSelector} from \"../state/hooks/hooks\";\r\nimport {filteredTaskSelector} from \"../state/selectors/tasksSelector\";\r\nimport {Task} from \"./Task\";\r\n\r\ntype TodoListPropsType = {\r\n    todoListID: string\r\n    title: string,\r\n    filter: FilterValuesType\r\n    removeTask: (todoListID: string, taskId: string) => void,\r\n    changeTodoListFilter: (todoListID: string, filter: FilterValuesType) => void\r\n    addTask: (todoListID: string, title: string) => void\r\n    changTaskTitle: (todoListID: string, taskId: string, title: string) => void\r\n    changeTaskStatus: (todoListID: string, taskId: string, isDone: boolean) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    editTodoListTitle: (todoListID: string, title: string) => void\r\n};\r\n\r\nconst TodoList: FC<TodoListPropsType> = memo((props) => {\r\n\r\n    const {\r\n        title,\r\n        filter,\r\n        todoListID,\r\n        removeTask,\r\n        addTask,\r\n        changeTaskStatus,\r\n        changTaskTitle,\r\n        removeTodoList,\r\n        changeTodoListFilter,\r\n        editTodoListTitle\r\n    } = props\r\n\r\n    const tasks = useAppSelector((state) => filteredTaskSelector(state.tasks[todoListID], filter))\r\n\r\n    const onClickHandlerCreator = useCallback((filter: FilterValuesType) => () => changeTodoListFilter(todoListID, filter), [changeTodoListFilter, todoListID]);\r\n\r\n    const tasksElements = useMemo(() => tasks.map((task: TaskType) => {\r\n        return (\r\n            <Task key={task.id} task={task} changTaskTitle={changTaskTitle} changeTaskStatus={changeTaskStatus}\r\n                  todoListID={todoListID} removeTask={removeTask}/>\r\n        )\r\n    }), [changeTaskStatus, changTaskTitle, removeTask, tasks, todoListID])\r\n\r\n    const removeTodoListCallback = useCallback(() => {\r\n        removeTodoList(todoListID)\r\n    }, [removeTodoList, todoListID])\r\n\r\n    const addTaskCallback = useCallback((title: string) => {\r\n        addTask(todoListID, title)\r\n    }, [addTask, todoListID])\r\n\r\n    const changeTodoListTitle = useCallback((title: string) => {\r\n        editTodoListTitle(todoListID, title)\r\n    }, [editTodoListTitle, todoListID])\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={title} changeTitle={changeTodoListTitle}/>\r\n                <IconButton aria-label=\"delete\" onClick={removeTodoListCallback}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTaskCallback}/>\r\n\r\n            <List>{tasksElements}</List>\r\n\r\n            <div style={{marginTop: 15, display: 'flex', columnGap: 15}}>\r\n                <Button style={{\r\n                    background: filter === 'all' ? '#000000' : 'inherit',\r\n                    border: '1px solid #000000',\r\n                }}\r\n                        variant={filter === 'all' ? 'outlined' : 'contained'}\r\n                        onClick={onClickHandlerCreator('all')}>All\r\n                </Button>\r\n                <Button style={{background: filter === 'active' ? '#000000' : 'inherit', border: '1px solid #000000'}}\r\n                        color={'primary'}\r\n                        variant={filter === 'active' ? 'outlined' : 'contained'}\r\n                        onClick={onClickHandlerCreator('active')}>Active\r\n                </Button>\r\n                <Button\r\n                    style={{background: filter === 'completed' ? '#000000' : 'inherit', border: '1px solid #000000'}}\r\n                    color={'secondary'}\r\n                    variant={filter === 'completed' ? 'outlined' : 'contained'}\r\n                    onClick={onClickHandlerCreator('completed')}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default TodoList;","import {FilterValuesType} from \"../todoListReducer\";\r\nimport {TaskType} from \"../tasksReducer\";\r\n\r\nexport const filteredTaskSelector = (tasks: TaskType[], filter: FilterValuesType): TaskType[] => {\r\n    switch (filter) {\r\n        case \"all\": {\r\n            return tasks\r\n        }\r\n        case \"active\": {\r\n            return tasks.filter(task => !task.isDone)\r\n        }\r\n        case \"completed\": {\r\n            return tasks.filter(task => task.isDone)\r\n        }\r\n        default: {\r\n            return tasks\r\n        }\r\n    }\r\n}","import React, {useCallback} from 'react';\r\nimport TodoList from \"./components/TodoList\";\r\nimport AddItemForm from \"./components/AddItemForm\";\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport Button from \"@mui/material/Button\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Container from '@mui/material/Container'\r\nimport Grid from '@mui/material/Grid'\r\nimport {\r\n    addTodoListAC,\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleAC,\r\n    FilterValuesType,\r\n    removeTodoListAC\r\n} from \"./state/todoListReducer\";\r\nimport {addTaskAC, changTaskStatusAC, changTaskTitleAC, removeTaskAC} from \"./state/tasksReducer\";\r\nimport {useAppDispatch, useAppSelector} from \"./state/hooks/hooks\";\r\n\r\nfunction App() {\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    const {todoLists} = useAppSelector((state) => state)\r\n\r\n    const removeTask = useCallback((todoListID: string, taskId: string) => {\r\n        dispatch(removeTaskAC(todoListID, taskId))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((todoListID: string, title: string) => {\r\n        dispatch(addTaskAC(todoListID, title))\r\n    }, [dispatch])\r\n\r\n    const changeTaskStatus = useCallback((todoListID: string, taskId: string, isDone: boolean) => {\r\n        dispatch(changTaskStatusAC(todoListID, taskId, isDone))\r\n    }, [dispatch])\r\n\r\n    const changTaskTitle = useCallback((todoListID: string, taskId: string, title: string) => {\r\n        dispatch(changTaskTitleAC(todoListID, taskId, title))\r\n    }, [dispatch])\r\n\r\n    const changeTodoListFilter = useCallback((todoListID: string, filter: FilterValuesType) => {\r\n        dispatch(changeTodoListFilterAC(todoListID, filter))\r\n    }, [dispatch])\r\n\r\n    const removeTodoList = useCallback((todoListID: string) => {\r\n        dispatch(removeTodoListAC(todoListID))\r\n    }, [dispatch])\r\n\r\n    const addTodoListCallback = useCallback((title: string) => {\r\n        dispatch(addTodoListAC(title))\r\n    }, [dispatch])\r\n\r\n    const editTodoListTitle = useCallback((todoListID: string, title: string) => {\r\n        dispatch(changeTodoListTitleAC(todoListID, title))\r\n    }, [dispatch])\r\n\r\n    const todoListsItem = todoLists.map(todoList => {\r\n\r\n        return (\r\n            <Grid item xs={2} md={4} key={todoList.id}>\r\n                <Paper elevation={2} style={{padding: 15, borderRadius: 16}}>\r\n                    <TodoList\r\n                        todoListID={todoList.id}\r\n                        key={todoList.id}\r\n                        title={todoList.title}\r\n                        filter={todoList.filter}\r\n                        addTask={addTask}\r\n                        changeTodoListFilter={changeTodoListFilter}\r\n                        removeTask={removeTask}\r\n                        changTaskTitle={changTaskTitle}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        removeTodoList={removeTodoList}\r\n                        editTodoListTitle={editTodoListTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar style={{background: '#000000'}} position=\"static\">\r\n                <Container style={{padding: 0}} maxWidth={'lg'}>\r\n                    <Toolbar>\r\n                        <IconButton\r\n                            size=\"large\"\r\n                            edge=\"start\"\r\n                            color=\"inherit\"\r\n                            aria-label=\"menu\"\r\n                            sx={{mr: 2}}\r\n                        >\r\n                            <MenuIcon/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                            Todo\r\n                        </Typography>\r\n                        <Button color=\"inherit\">Login</Button>\r\n                    </Toolbar>\r\n                </Container>\r\n            </AppBar>\r\n\r\n            <Container fixed maxWidth={'lg'}>\r\n                <Grid container style={{padding: 20}}>\r\n                    <AddItemForm addItem={addTodoListCallback}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todoListsItem}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {addTodoListAC, removeTodoListAC} from \"./todoListReducer\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type TaskType = {\r\n    id: string,\r\n    title: string,\r\n    isDone: boolean,\r\n}\r\nexport type TasksType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nexport const tasksReducer = (state: TasksType = {}, action: AllActionsType): TasksType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.payload.todoListID]: state[action.payload.todoListID].filter(stateItem => stateItem.id !== action.payload.taskID)\r\n            }\r\n        case \"ADD-TASK\":\r\n            return {\r\n                ...state,\r\n                [action.payload.todoListID]: [{\r\n                    id: v1(),\r\n                    title: action.payload.newTitle,\r\n                    isDone: false\r\n                }, ...state[action.payload.todoListID]]\r\n            }\r\n        case \"CHANGE-TASK-STATUS\":\r\n            return {\r\n                ...state,\r\n                [action.payload.todoListID]: state[action.payload.todoListID].map(stateItem => stateItem.id === action.payload.taskID ? {\r\n                    ...stateItem,\r\n                    isDone: action.payload.isDone\r\n                } : stateItem)\r\n            }\r\n        case \"CHANGE-TASK-TITLE\":\r\n            return {\r\n                ...state,\r\n                [action.payload.todoListID]: state[action.payload.todoListID].map(stateItem => stateItem.id === action.payload.taskID ? {\r\n                    ...stateItem,\r\n                    title: action.payload.newTitle\r\n                } : stateItem)\r\n            }\r\n        case \"ADD-TODOLIST\":\r\n            return {\r\n                ...state,\r\n                [action.payload.todoListID]: []\r\n            }\r\n        case \"REMOVE-TODOLIST\":\r\n            const copy = {...state};\r\n            delete copy[action.payload.todoListID]\r\n            return copy\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype AllActionsType =\r\n    ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof changTaskStatusAC>\r\n    | ReturnType<typeof changTaskTitleAC>\r\n    | ReturnType<typeof addTodoListAC>\r\n    | ReturnType<typeof removeTodoListAC>\r\n\r\nexport const removeTaskAC = (todoListID: string, taskID: string) => {\r\n    return {\r\n        type: 'REMOVE-TASK',\r\n        payload: {\r\n            todoListID,\r\n            taskID\r\n        }\r\n    } as const\r\n}\r\n\r\nexport const addTaskAC = (todoListID: string, newTitle: string) => {\r\n    return {\r\n        type: 'ADD-TASK',\r\n        payload: {\r\n            todoListID,\r\n            newTitle\r\n        }\r\n    } as const\r\n}\r\n\r\nexport const changTaskStatusAC = (todoListID: string, taskID: string, isDone: boolean) => {\r\n    return {\r\n        type: 'CHANGE-TASK-STATUS',\r\n        payload: {\r\n            todoListID,\r\n            taskID,\r\n            isDone\r\n        }\r\n    } as const\r\n}\r\n\r\nexport const changTaskTitleAC = (todoListID: string, taskID: string, newTitle: string) => {\r\n    return {\r\n        type: 'CHANGE-TASK-TITLE',\r\n        payload: {\r\n            todoListID,\r\n            taskID,\r\n            newTitle\r\n        }\r\n    } as const\r\n}\r\n\r\n","import {v1} from \"uuid\";\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\n\r\nexport type TodoListsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const todoListReducer = (state: TodoListsType[] = [], action: AllActionsType): TodoListsType[] => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(stateItem => stateItem.id !== action.payload.todoListID)\r\n        case \"ADD-TODOLIST\":\r\n            return [{id: action.payload.todoListID, title: action.payload.newTitle, filter: 'all'}, ...state]\r\n        case \"CHANGE-TODOLIST-TITLE\":\r\n            return state.map(stateItem => stateItem.id === action.payload.todoListID ? {\r\n                ...stateItem,\r\n                title: action.payload.newTitle\r\n            } : stateItem)\r\n        case \"CHANGE-TODOLIST-FILTER\":\r\n            return state.map(stateItem => stateItem.id === action.payload.todoListID ? {\r\n                ...stateItem,\r\n                filter: action.payload.filter\r\n            } : stateItem)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype AllActionsType =\r\n    ReturnType<typeof removeTodoListAC>\r\n    | ReturnType<typeof addTodoListAC>\r\n    | ReturnType<typeof changeTodoListTitleAC>\r\n    | ReturnType<typeof changeTodoListFilterAC>\r\n\r\nexport const removeTodoListAC = (todoListID: string) => {\r\n    return {\r\n        type: 'REMOVE-TODOLIST',\r\n        payload: {\r\n            todoListID\r\n        }\r\n    } as const\r\n}\r\n\r\nexport const addTodoListAC = (newTitle: string) => {\r\n    return {\r\n        type: 'ADD-TODOLIST',\r\n        payload: {\r\n            newTitle,\r\n            todoListID: v1()\r\n        }\r\n    } as const\r\n}\r\n\r\nexport const changeTodoListTitleAC = (todoListID: string, newTitle: string) => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-TITLE',\r\n        payload: {\r\n            todoListID,\r\n            newTitle\r\n        }\r\n    } as const\r\n}\r\n\r\nexport const changeTodoListFilterAC = (todoListID: string, filter: FilterValuesType) => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-FILTER',\r\n        payload: {\r\n            todoListID,\r\n            filter\r\n        }\r\n    } as const\r\n}","import {createStore, combineReducers, compose} from \"redux\";\r\nimport {todoListReducer} from \"./todoListReducer\";\r\nimport {tasksReducer} from \"./tasksReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    todoLists: todoListReducer,\r\n    tasks: tasksReducer\r\n})\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose\r\n    }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport const store = createStore(rootReducer, composeEnhancers());\r\n\r\nexport type RootStateType = ReturnType<typeof store.getState>\r\nexport type AppDispatchType = typeof store.dispatch;","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nconst root = ReactDOM.createRoot(\r\n    document.getElementById('root') as HTMLElement\r\n);\r\nroot.render(\r\n\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n\r\n);\r\n"],"sourceRoot":""}