{"version":3,"sources":["components/AddItemForm.tsx","components/EditableSpan.tsx","components/TodoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AddItemForm","addItem","useState","error","setError","titleTask","setTitle","addItemCallback","trimmedTitle","trim","TextField","label","variant","value","onChange","event","currentTarget","onKeyDown","key","IconButton","onClick","color","style","maxWidth","maxHeight","minWidth","minHeight","EditableSpan","propsTitle","title","changeTitle","editMode","setEditMode","activateEditMode","onBlur","autoFocus","onDoubleClick","TodoList","props","tasks","filter","todoListID","removeTask","addTask","changeTaskStatus","editTaskTitle","removeTodoList","changeTodoListFilter","editTodoListTitle","onClickHandlerCreator","tasksElements","map","task","ListItem","id","secondaryAction","aria-label","disablePadding","ListItemButton","dense","ListItemIcon","Checkbox","disableRipple","checked","isDone","List","marginTop","display","columnGap","Button","background","border","App","todoListID1","v1","todoListID2","todoLists","setTodoLists","setTasks","taskId","todoList","todoListsItem","filteredTasks","t","getFilteredTasks","Grid","item","xs","md","Paper","elevation","padding","borderRadius","className","AppBar","position","Container","Toolbar","size","edge","sx","mr","Typography","component","flexGrow","fixed","container","newTodoLIstID","spacing","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"kQAmDeA,EA1C+B,SAAH,GAAmB,IAAdC,EAAO,EAAPA,QAC5C,EAA0BC,oBAAkB,GAAM,mBAA3CC,EAAK,KAAEC,EAAQ,KACtB,EAA8BF,mBAAiB,IAAG,mBAA3CG,EAAS,KAAEC,EAAQ,KAEpBC,EAAkB,WACpB,IAAMC,EAAeH,EAAUI,OAC3BD,GACAP,EAAQO,GACRF,EAAS,KAETF,GAAS,IAcjB,OACI,6BACI,kBAACM,EAAA,EAAS,CACNC,MAAOR,EAAQ,2BAA6B,QAC5CS,QAAQ,WACRC,MAAOR,EACPS,SAZiB,SAACC,GAC1BT,EAASS,EAAMC,cAAcH,OAE7BV,GAASC,GAAS,IAUVa,UAjBkB,SAACF,GACb,UAAdA,EAAMG,KAAmBX,KAiBjBJ,MAAOA,IAEX,kBAACgB,EAAA,EAAU,CAACC,QAASb,EAAiBc,MAAO,UACjCC,MAAO,CAACC,SAAU,OAAQC,UAAW,OAAQC,SAAU,OAAQC,UAAW,SAClF,kBAAC,IAAU,SCVZC,EA3BiC,SAAH,GAA0C,IAA9BC,EAAU,EAAjBC,MAAmBC,EAAW,EAAXA,YACjE,EAA0B5B,mBAAiB0B,GAAW,mBAA/CC,EAAK,KAAEvB,EAAQ,KACtB,EAAgCJ,oBAAkB,GAAM,mBAAjD6B,EAAQ,KAAEC,EAAW,KAEtBC,EAAmB,WACrBD,GAAaD,GACbD,EAAYD,IAShB,OACI,oCAEQE,EAAW,kBAACrB,EAAA,EAAS,CAACG,MAAOgB,EAAOf,SATrB,SAACC,GACxBT,EAASS,EAAMC,cAAcH,QAQ6CqB,OAAQD,EACpDhB,UANX,SAACF,GAAsC,MAAmB,UAAdA,EAAMG,KAAmBe,KAO1DE,WAAS,EAACvB,QAAQ,aACpC,0BAAMwB,cAAeH,GAAmBL,K,uEC4G7CS,EAvG+B,SAACC,GAE3C,IACIT,EAWAS,EAXAT,MACAU,EAUAD,EAVAC,MACAC,EASAF,EATAE,OACAC,EAQAH,EARAG,WACAC,EAOAJ,EAPAI,WACAC,EAMAL,EANAK,QACAC,EAKAN,EALAM,iBACAC,EAIAP,EAJAO,cACAC,EAGAR,EAHAQ,eACAC,EAEAT,EAFAS,qBACAC,EACAV,EADAU,kBAGEC,EAAwB,SAACT,GAAwB,OAAK,kBAAMO,EAAqBN,EAAYD,KAG7FU,EAAgBX,EAAMY,KAAI,SAACC,GAU7B,OACI,kBAACC,EAAA,EAAQ,CACLnC,IAAKkC,EAAKE,GACVC,gBACI,kBAACpC,EAAA,EAAU,CAACC,QAZG,WAAH,OAASsB,EAAWD,EAAYW,EAAKE,KAYRE,aAAW,UAChD,kBAAC,IAAM,OAGfC,gBAAc,GAEd,kBAACC,EAAA,EAAc,CAACC,OAAK,GACjB,kBAACC,EAAA,EAAY,KACT,kBAACC,EAAA,EAAQ,CACLC,eAAa,EACbzC,MAAM,UACN0C,QAASX,EAAKY,OACdlD,SAtBa,SAACC,GAAoC,OAAK6B,EAAiBH,EAAYW,EAAKE,GAAIvC,EAAMC,cAAc+C,aAyBzH,kBAAC,EAAY,CAAClC,MAAOuB,EAAKvB,MAAOC,YAvBzB,SAACD,GACjBgB,EAAcJ,EAAYW,EAAKE,GAAIzB,WAyC3C,OACI,6BACI,4BACI,kBAAC,EAAY,CAACA,MAAOA,EAAOC,YARZ,SAACD,GACzBmB,EAAkBP,EAAYZ,MAQtB,kBAACV,EAAA,EAAU,CAACqC,aAAW,SAASpC,QAjBb,WAC3B0B,EAAeL,KAiBH,kBAAC,IAAM,QAGf,kBAAC,EAAW,CAACxC,QAjBG,SAAC4B,GACrBc,EAAQF,EAAYZ,MAkBhB,kBAACoC,EAAA,EAAI,KAAEf,GAEP,yBAAK5B,MAAO,CAAC4C,UAAW,GAAIC,QAAS,OAAQC,UAAW,KACpD,kBAACC,EAAA,EAAM,CAAC/C,MAAO,CACXgD,WAAuB,QAAX9B,EAAmB,UAAY,UAC3C+B,OAAQ,qBAEJ3D,QAAoB,QAAX4B,EAAmB,WAAa,YACzCpB,QAAS6B,EAAsB,QAAO,OAE9C,kBAACoB,EAAA,EAAM,CAAC/C,MAAO,CAACgD,WAAuB,WAAX9B,EAAsB,UAAY,UAAW+B,OAAQ,qBACzElD,MAAO,UACPT,QAAoB,WAAX4B,EAAsB,WAAa,YAC5CpB,QAAS6B,EAAsB,WAAU,UAEjD,kBAACoB,EAAA,EAAM,CACH/C,MAAO,CAACgD,WAAuB,cAAX9B,EAAyB,UAAY,UAAW+B,OAAQ,qBAC5ElD,MAAO,YACPT,QAAoB,cAAX4B,EAAyB,WAAa,YAC/CpB,QAAS6B,EAAsB,cAAa,gB,gFC+CjDuB,MAvJf,WAAgB,IAAD,EAELC,EAAcC,cACdC,EAAcD,cAEpB,EAAkCxE,mBAA0B,CACxD,CAACoD,GAAImB,EAAa5C,MAAO,gBAAiBW,OAAQ,UAClD,CAACc,GAAIqB,EAAa9C,MAAO,cAAeW,OAAQ,YAClD,mBAHKoC,EAAS,KAAEC,EAAY,KAK9B,EAA0B3E,oBAAQ,mBAC7BuE,EAAc,CACX,CACInB,GAAIoB,cAAM7C,MAAO,aAAcmC,QAAQ,GAE3C,CACIV,GAAIoB,cAAM7C,MAAO,KAAMmC,QAAQ,GAEnC,CACIV,GAAIoB,cAAM7C,MAAO,QAASmC,QAAQ,GAEtC,CACIV,GAAIoB,cAAM7C,MAAO,aAAcmC,QAAQ,KAE9C,cACAW,EAAc,CACX,CACIrB,GAAIoB,cAAM7C,MAAO,aAAcmC,QAAQ,GAE3C,CACIV,GAAIoB,cAAM7C,MAAO,KAAMmC,QAAQ,GAEnC,CACIV,GAAIoB,cAAM7C,MAAO,QAASmC,QAAQ,GAEtC,CACIV,GAAIoB,cAAM7C,MAAO,aAAcmC,QAAQ,KAE9C,IACH,mBA7BKzB,EAAK,KAAEuC,EAAQ,KA+BhBpC,EAAa,SAACD,EAAoBsC,GACpCD,EAAS,2BAAIvC,GAAK,kBAAGE,EAAaF,EAAME,GAAYD,QAAO,SAAAY,GAAI,OAAIA,EAAKE,KAAOyB,SAG7EpC,EAAU,SAACF,EAAoBZ,GACjCiD,EAAS,2BAAIvC,GAAK,kBAAGE,EAAU,sBAAOF,EAAME,IAAW,CAAE,CAACa,GAAIoB,cAAM7C,QAAOmC,QAAQ,SAcjFpB,EAAmB,SAACH,EAAoBsC,EAAgBf,GAC1Dc,EAAS,2BACFvC,GAAK,kBACPE,EAAaF,EAAME,GAAYU,KAAI,SAAAC,GAAI,OAAIA,EAAKE,KAAOyB,EAAM,2BAAO3B,GAAI,IAAEY,WAAUZ,SAIvFP,EAAgB,SAACJ,EAAoBsC,EAAgBlD,GACvDiD,EAAS,2BACFvC,GAAK,kBACPE,EAAaF,EAAME,GAAYU,KAAI,SAAAC,GAAI,OAAIA,EAAKE,KAAOyB,EAAM,2BAAO3B,GAAI,IAAEvB,UAASuB,SAItFL,EAAuB,SAACN,EAAoBD,GAC9CqC,EAAaD,EAAUzB,KAAI,SAAC6B,GAAQ,OAAKA,EAAS1B,KAAOb,EAAU,2BAAOuC,GAAQ,IAAExC,WAAUwC,OAG5FlC,EAAiB,SAACL,GACpBoC,EAAaD,EAAUpC,QAAO,SAAAwC,GAAQ,OAAIA,EAAS1B,KAAOb,aACnDF,EAAME,IASXO,EAAoB,SAACP,EAAoBZ,GAC3CgD,EAAaD,EAAUzB,KAAI,SAAA6B,GAAQ,OAAIA,EAAS1B,KAAOb,EAAU,2BAAOuC,GAAQ,IAAEnD,UAASmD,OAGzFC,EAAgBL,EAAUzB,KAAI,SAAA6B,GAChC,IAAME,EA7Ce,SAAC1C,EAA0BD,GAChD,OAAQC,GACJ,IAAK,YACD,OAAOD,EAAMC,QAAO,SAAA2C,GAAC,OAAIA,EAAEnB,UAC/B,IAAK,SACD,OAAOzB,EAAMC,QAAO,SAAA2C,GAAC,OAAKA,EAAEnB,UAChC,QACI,OAAOzB,GAsCO6C,CAAiBJ,EAASxC,OAAQD,EAAMyC,EAAS1B,KACvE,OACI,kBAAC+B,EAAA,EAAI,CAACC,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGtE,IAAK8D,EAAS1B,IACnC,kBAACmC,EAAA,EAAK,CAACC,UAAW,EAAGpE,MAAO,CAACqE,QAAS,GAAIC,aAAc,KACpD,kBAAC,EAAQ,CACLnD,WAAYuC,EAAS1B,GACrBpC,IAAK8D,EAAS1B,GACdzB,MAAOmD,EAASnD,MAChBW,OAAQwC,EAASxC,OACjBG,QAASA,EACTI,qBAAsBA,EACtBL,WAAYA,EACZG,cAAeA,EACfN,MAAO2C,EACPtC,iBAAkBA,EAClBE,eAAgBA,EAChBE,kBAAmBA,SAOvC,OACI,yBAAK6C,UAAU,OACX,kBAACC,EAAA,EAAM,CAACxE,MAAO,CAACgD,WAAY,WAAYyB,SAAS,UAC7C,kBAACC,EAAA,EAAS,CAAC1E,MAAO,CAACqE,QAAS,GAAIpE,SAAU,MACtC,kBAAC0E,EAAA,EAAO,KACJ,kBAAC9E,EAAA,EAAU,CACP+E,KAAK,QACLC,KAAK,QACL9E,MAAM,UACNmC,aAAW,OACX4C,GAAI,CAACC,GAAI,IAET,kBAAC,IAAQ,OAEb,kBAACC,EAAA,EAAU,CAAC1F,QAAQ,KAAK2F,UAAU,MAAMH,GAAI,CAACI,SAAU,IAAG,QAG3D,kBAACnC,EAAA,EAAM,CAAChD,MAAM,WAAS,YAKnC,kBAAC2E,EAAA,EAAS,CAACS,OAAK,EAAClF,SAAU,MACvB,kBAAC8D,EAAA,EAAI,CAACqB,WAAS,EAACpF,MAAO,CAACqE,QAAS,KAC7B,kBAAC,EAAW,CAAC1F,QA1DD,SAAC4B,GACzB,IAAM8E,EAAgBjC,cACtBG,EAAa,CAAC,CAACvB,GAAIqD,EAAe9E,QAAOW,OAAQ,QAAM,mBAAKoC,KAC5DE,EAAS,2BAAIvC,GAAK,kBAAGoE,EAAgB,UAyD7B,kBAACtB,EAAA,EAAI,CAACqB,WAAS,EAACE,QAAS,GACpB3B,MC5JN4B,EAZS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,8BAAqBC,MAAK,YAAgD,IAA9CC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QACxDJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHPQ,IAASC,WAClBC,SAASC,eAAe,SAEvBC,OACD,kBAAC,IAAMC,WAAU,KACb,kBAAC,EAAG,QAIZd,K","file":"static/js/main.13b7c3cd.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState, FC} from 'react';\r\nimport TextField from \"@mui/material/TextField\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport AddBoxIcon from \"@mui/icons-material/AddBox\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nconst AddItemForm: FC<AddItemFormPropsType> = ({addItem}) => {\r\n    const [error, setError] = useState<boolean>(false);\r\n    const [titleTask, setTitle] = useState<string>('');\r\n\r\n    const addItemCallback = () => {\r\n        const trimmedTitle = titleTask.trim()\r\n        if (trimmedTitle) {\r\n            addItem(trimmedTitle);\r\n            setTitle('');\r\n        } else {\r\n            setError(true);\r\n        }\r\n    }\r\n\r\n    const onKeyDownInputHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        event.key === 'Enter' && addItemCallback();\r\n    }\r\n\r\n    const onChangeInputHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value)\r\n\r\n        error && setError(false);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                label={error ? 'Please, enter task title' : 'Title'}\r\n                variant=\"outlined\"\r\n                value={titleTask}\r\n                onChange={onChangeInputHandler}\r\n                onKeyDown={onKeyDownInputHandler}\r\n                error={error}\r\n            />\r\n            <IconButton onClick={addItemCallback} color={'primary'}\r\n                        style={{maxWidth: '40px', maxHeight: '40px', minWidth: '40px', minHeight: '40px'}}>\r\n                <AddBoxIcon/>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddItemForm;","import React, {useState, FC, ChangeEvent, KeyboardEvent} from 'react';\r\nimport TextField from \"@mui/material/TextField\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nconst EditableSpan: FC<EditableSpanPropsType> = ({title: propsTitle, changeTitle}) => {\r\n    const [title, setTitle] = useState<string>(propsTitle)\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(!editMode)\r\n        changeTitle(title);\r\n    }\r\n\r\n    const onChangeInputValue = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value)\r\n    }\r\n\r\n    const onEnterHandler = (event: KeyboardEvent<HTMLInputElement>) => event.key === 'Enter' && activateEditMode()\r\n\r\n    return (\r\n        <>\r\n            {\r\n                editMode ? <TextField value={title} onChange={onChangeInputValue} onBlur={activateEditMode}\r\n                                      onKeyDown={onEnterHandler}\r\n                                      autoFocus variant=\"standard\"/> :\r\n                    <span onDoubleClick={activateEditMode}>{propsTitle}</span>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default EditableSpan;","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from \"../App\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Delete from \"@mui/icons-material/Delete\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Checkbox from '@mui/material/Checkbox'\r\nimport ListItem from '@mui/material/ListItem'\r\nimport ListItemButton from '@mui/material/ListItemButton'\r\nimport ListItemIcon from '@mui/material/ListItemIcon'\r\nimport List from \"@mui/material/List\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string,\r\n    title: string,\r\n    isDone: boolean,\r\n}\r\n\r\ntype TodoListPropsType = {\r\n    todoListID: string\r\n    title: string,\r\n    filter: FilterValuesType\r\n    tasks: Array<TaskType>,\r\n    removeTask: (todoListID: string, taskId: string) => void,\r\n    changeTodoListFilter: (todoListID: string, filter: FilterValuesType) => void\r\n    addTask: (todoListID: string, title: string) => void\r\n    editTaskTitle: (todoListID: string, taskId: string, title: string) => void\r\n    changeTaskStatus: (todoListID: string, taskId: string, isDone: boolean) => void\r\n    removeTodoList: (todoListID: string) => void\r\n    editTodoListTitle: (todoListID: string, title: string) => void\r\n};\r\n\r\nconst TodoList: React.FC<TodoListPropsType> = (props) => {\r\n\r\n    const {\r\n        title,\r\n        tasks,\r\n        filter,\r\n        todoListID,\r\n        removeTask,\r\n        addTask,\r\n        changeTaskStatus,\r\n        editTaskTitle,\r\n        removeTodoList,\r\n        changeTodoListFilter,\r\n        editTodoListTitle\r\n    } = props\r\n\r\n    const onClickHandlerCreator = (filter: FilterValuesType) => () => changeTodoListFilter(todoListID, filter);\r\n\r\n\r\n    const tasksElements = tasks.map((task: TaskType) => {\r\n\r\n        const removeTaskCallback = () => removeTask(todoListID, task.id)\r\n\r\n        const changeTaskStatusCallback = (event: ChangeEvent<HTMLInputElement>) => changeTaskStatus(todoListID, task.id, event.currentTarget.checked)\r\n\r\n        const changeTitle = (title: string) => {\r\n            editTaskTitle(todoListID, task.id, title)\r\n        }\r\n\r\n        return (\r\n            <ListItem\r\n                key={task.id}\r\n                secondaryAction={\r\n                    <IconButton onClick={removeTaskCallback} aria-label=\"delete\">\r\n                        <Delete/>\r\n                    </IconButton>\r\n                }\r\n                disablePadding\r\n            >\r\n                <ListItemButton dense>\r\n                    <ListItemIcon>\r\n                        <Checkbox\r\n                            disableRipple\r\n                            color=\"primary\"\r\n                            checked={task.isDone}\r\n                            onChange={changeTaskStatusCallback}\r\n                        />\r\n                    </ListItemIcon>\r\n                    <EditableSpan title={task.title} changeTitle={changeTitle}/>\r\n                </ListItemButton>\r\n            </ListItem>\r\n        )\r\n    })\r\n\r\n    const removeTodoListCallback = () => {\r\n        removeTodoList(todoListID)\r\n    }\r\n\r\n    const addTaskCallback = (title: string) => {\r\n        addTask(todoListID, title)\r\n    }\r\n\r\n    const changeTodoListTitle = (title: string) => {\r\n        editTodoListTitle(todoListID, title)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={title} changeTitle={changeTodoListTitle}/>\r\n                <IconButton aria-label=\"delete\" onClick={removeTodoListCallback}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTaskCallback}/>\r\n\r\n            <List>{tasksElements}</List>\r\n\r\n            <div style={{marginTop: 15, display: 'flex', columnGap: 15}}>\r\n                <Button style={{\r\n                    background: filter === 'all' ? '#000000' : 'inherit',\r\n                    border: '1px solid #000000',\r\n                }}\r\n                        variant={filter === 'all' ? 'outlined' : 'contained'}\r\n                        onClick={onClickHandlerCreator('all')}>All\r\n                </Button>\r\n                <Button style={{background: filter === 'active' ? '#000000' : 'inherit', border: '1px solid #000000'}}\r\n                        color={'primary'}\r\n                        variant={filter === 'active' ? 'outlined' : 'contained'}\r\n                        onClick={onClickHandlerCreator('active')}>Active\r\n                </Button>\r\n                <Button\r\n                    style={{background: filter === 'completed' ? '#000000' : 'inherit', border: '1px solid #000000'}}\r\n                    color={'secondary'}\r\n                    variant={filter === 'completed' ? 'outlined' : 'contained'}\r\n                    onClick={onClickHandlerCreator('completed')}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoList;","import React, {useState} from 'react';\r\nimport TodoList, {TaskType} from \"./components/TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport AddItemForm from \"./components/AddItemForm\";\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport Button from \"@mui/material/Button\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Container from '@mui/material/Container'\r\nimport Grid from '@mui/material/Grid'\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\n\r\nexport type TodoListsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nfunction App() {\r\n\r\n    const todoListID1 = v1();\r\n    const todoListID2 = v1();\r\n\r\n    const [todoLists, setTodoLists] = useState<TodoListsType[]>([\r\n        {id: todoListID1, title: 'What to learn', filter: 'active'},\r\n        {id: todoListID2, title: 'What to buy', filter: 'active'},\r\n    ]);\r\n\r\n    const [tasks, setTasks] = useState<TasksType>({\r\n        [todoListID1]: [\r\n            {\r\n                id: v1(), title: 'HTML & CSS', isDone: true,\r\n            },\r\n            {\r\n                id: v1(), title: 'JS', isDone: true,\r\n            },\r\n            {\r\n                id: v1(), title: 'React', isDone: false,\r\n            },\r\n            {\r\n                id: v1(), title: 'TypeScript', isDone: false,\r\n            },\r\n        ],\r\n        [todoListID2]: [\r\n            {\r\n                id: v1(), title: 'HTML & CSS', isDone: true,\r\n            },\r\n            {\r\n                id: v1(), title: 'JS', isDone: true,\r\n            },\r\n            {\r\n                id: v1(), title: 'React', isDone: false,\r\n            },\r\n            {\r\n                id: v1(), title: 'TypeScript', isDone: false,\r\n            },\r\n        ],\r\n    });\r\n\r\n    const removeTask = (todoListID: string, taskId: string) => {\r\n        setTasks({...tasks, [todoListID]: tasks[todoListID].filter(task => task.id !== taskId)});\r\n    };\r\n\r\n    const addTask = (todoListID: string, title: string) => {\r\n        setTasks({...tasks, [todoListID]: [...tasks[todoListID], {id: v1(), title, isDone: false}]})\r\n    }\r\n\r\n    const getFilteredTasks = (filter: FilterValuesType, tasks: TaskType[]): TaskType[] => {\r\n        switch (filter) {\r\n            case \"completed\":\r\n                return tasks.filter(t => t.isDone)\r\n            case 'active':\r\n                return tasks.filter(t => !t.isDone)\r\n            default:\r\n                return tasks\r\n        }\r\n    }\r\n\r\n    const changeTaskStatus = (todoListID: string, taskId: string, isDone: boolean) => {\r\n        setTasks({\r\n            ...tasks,\r\n            [todoListID]: tasks[todoListID].map(task => task.id === taskId ? {...task, isDone} : task)\r\n        });\r\n    }\r\n\r\n    const editTaskTitle = (todoListID: string, taskId: string, title: string) => {\r\n        setTasks({\r\n            ...tasks,\r\n            [todoListID]: tasks[todoListID].map(task => task.id === taskId ? {...task, title} : task)\r\n        })\r\n    }\r\n\r\n    const changeTodoListFilter = (todoListID: string, filter: FilterValuesType) => {\r\n        setTodoLists(todoLists.map((todoList) => todoList.id === todoListID ? {...todoList, filter} : todoList))\r\n    };\r\n\r\n    const removeTodoList = (todoListID: string) => {\r\n        setTodoLists(todoLists.filter(todoList => todoList.id !== todoListID));\r\n        delete tasks[todoListID];\r\n    }\r\n\r\n    const addTodoListCallback = (title: string) => {\r\n        const newTodoLIstID = v1();\r\n        setTodoLists([{id: newTodoLIstID, title, filter: 'all'}, ...todoLists]);\r\n        setTasks({...tasks, [newTodoLIstID]: []});\r\n    }\r\n\r\n    const editTodoListTitle = (todoListID: string, title: string) => {\r\n        setTodoLists(todoLists.map(todoList => todoList.id === todoListID ? {...todoList, title} : todoList))\r\n    }\r\n\r\n    const todoListsItem = todoLists.map(todoList => {\r\n        const filteredTasks = getFilteredTasks(todoList.filter, tasks[todoList.id])\r\n        return (\r\n            <Grid item xs={2} md={4} key={todoList.id}>\r\n                <Paper elevation={2} style={{padding: 15, borderRadius: 16}}>\r\n                    <TodoList\r\n                        todoListID={todoList.id}\r\n                        key={todoList.id}\r\n                        title={todoList.title}\r\n                        filter={todoList.filter}\r\n                        addTask={addTask}\r\n                        changeTodoListFilter={changeTodoListFilter}\r\n                        removeTask={removeTask}\r\n                        editTaskTitle={editTaskTitle}\r\n                        tasks={filteredTasks}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        removeTodoList={removeTodoList}\r\n                        editTodoListTitle={editTodoListTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar style={{background: '#000000'}} position=\"static\">\r\n                <Container style={{padding: 0}} maxWidth={'lg'}>\r\n                    <Toolbar>\r\n                        <IconButton\r\n                            size=\"large\"\r\n                            edge=\"start\"\r\n                            color=\"inherit\"\r\n                            aria-label=\"menu\"\r\n                            sx={{mr: 2}}\r\n                        >\r\n                            <MenuIcon/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\r\n                            Todo\r\n                        </Typography>\r\n                        <Button color=\"inherit\">Login</Button>\r\n                    </Toolbar>\r\n                </Container>\r\n            </AppBar>\r\n\r\n            <Container fixed maxWidth={'lg'}>\r\n                <Grid container style={{padding: 20}}>\r\n                    <AddItemForm addItem={addTodoListCallback}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todoListsItem}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {ReportHandler} from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(\r\n    document.getElementById('root') as HTMLElement\r\n);\r\nroot.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}